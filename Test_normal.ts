
import { Evaluator, Parser} from './src/SimpleLangEvaluator'


console.log("\n")
console.log("Test 1 for binary operations on integers")
console.log((new Evaluator()).evaluate('(1 + 3) == (10 - 6);'))
console.log("\n")
console.log("Test 2 for binary operations and unary operations on booleans")
console.log((new Evaluator()).evaluate('((true && false) || false) || true;'))
console.log("\n")
console.log("Test 3 for constant declaration and accessing")
console.log((new Evaluator()).evaluate("let z : int = 10; z + 10;"))
console.log("\n")
console.log("Test 4 for variable declaration, reassignment and accessing")
console.log((new Evaluator()).evaluate("let mut z : int = 10; z = z + 10; z + 10;"))
console.log("\n")
console.log("Test 5 for if-else statement")
console.log(new Evaluator().evaluate("let mut z: int = 0; if (z > 0) {z = 1;} else {z = 2;} z;"))
console.log("\n")
console.log("Test 6 for while loop statement")
console.log(new Evaluator().evaluate("let mut z: int = 0; while (z < 10) {z = z + 1;} z;"))
console.log("\n")
console.log("Test 7 for block statement")
console.log(new Evaluator().evaluate("let mut z: int  = 10; {let mut z : int = 20; z = 100;} z; "))
console.log("\n")
console.log("Test 8 for immutable borrow")
console.log((new Evaluator()).evaluate("let z : int = 10; let p : &int = &z; *p + 10;"))
console.log("\n")
console.log("Test 9 for mutable borrow")
console.log((new Evaluator()).evaluate("let mut z : int = 10; let p : &mut int = &mut z; *p = *p + 10; *p + 10;"))
