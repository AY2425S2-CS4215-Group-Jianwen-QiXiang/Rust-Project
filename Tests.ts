
import { Evaluator, Parser} from './src/SimpleLangEvaluator'

console.log("Test 1")
console.log((new Evaluator()).evaluate('1 + 2; 2 + 3;'))
console.log("\n")
console.log("Test 2")
console.log((new Evaluator()).evaluate('((true && false) || false) || true;'))
console.log("\n")
console.log("Test 3")
console.log((new Evaluator()).evaluate("let int: z = 10; z;"))
console.log("\n")
console.log("Test 4")
console.log((new Evaluator()).evaluate("fn f (int : a) -> int {return a + 1;} f(3);"))
console.log("\n")
console.log("Test 5")
console.log(new Evaluator().evaluate("while(false) {1;}"))
console.log("\n")
console.log("Test 5.5")
console.log(new Evaluator().evaluate(" let mut int: z = 0; while(z < 10) {z = z + 1;} z;"))
console.log("\n")
console.log("Test 6")
console.log(new Evaluator().evaluate("1 == 2;"))
console.log("\n")
console.log("Test 6.5")
console.log(new Evaluator().evaluate("let mut int: z = 0; if (false) {z = 1;} else {z = 2;} z;"))
console.log("\n")
console.log("Test 7")
console.log(new Evaluator().evaluate("1 <= 2;"))
console.log("\n")
console.log("Test 8")
console.log(new Evaluator().evaluate("let int: z = 10; {let int: z = 20; z;} z; "))
console.log("\n")
console.log("Test 9")
console.log(new Evaluator().evaluate("let int: z = 10; z = 20; z; "))
console.log("\n")
console.log("Test 10")
console.log(new Evaluator().evaluate("let mut int: z = 10; z = 20; z == 20; "))
console.log("\n")
console.log("Test 11")
console.log(new Evaluator().evaluate("let mut int: z = 10; let *mut int : x = &mut z; *x = 1; *x;"))
console.log("\n")
console.log("Test 11.1")
console.log(new Evaluator().evaluate("let mut int: z = 10; let *mut int : x = &mut z; let *mut int : y = x; *x;"))
console.log("\n")
console.log("Test 12")
console.log((new Evaluator()).evaluate("let mut int: z = 10; let *int : x = &z;" +
    "fn f (int : a) -> int {return *x + a + 1;} z = 5; f(3);"))
console.log("\n")
console.log("Test 12.5")
console.log((new Evaluator()).evaluate("let mut int: z = 10; let *int : x = &z;" +
    "fn f (int : a) -> int {*x = 1; return *x + a + 1;} z = 5; f(3);"))
console.log("\n")
console.log("Test 13")
console.log((new Evaluator()).evaluate("let mut int: z = 10; let *mut int : x = &mut z;" +
    "fn f (int : a) -> int {*x = 5; return *x + a + 1;}  f(3);"))
console.log("\n")
console.log("Test 14")
console.log((new Evaluator()).evaluate("let mut int: z = 10; let mut *mut int : x = &mut z;" +
    "let *int : y = &z;"))
console.log("\n")
console.log("Test 15")
console.log((new Evaluator()).evaluate("let string: x = \"1\"; let string: y = x; x;"))
console.log("\n")
console.log("Test 15.1")
console.log((new Evaluator()).evaluate("let string: x = \"1\"; x;"))
console.log("\n")
console.log("Test 15.2")
console.log((new Evaluator()).evaluate("let string: x = \"1\"; let *string: y = &x; *y;"))
//console.log((new Evaluator()).evaluate("let int: a = 10; let &int: b = &a; let &int : c = b; b;"))
//console.log((new Evaluator()).typeCheck("let mut int: z = 10;"))
