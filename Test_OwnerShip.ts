import { Evaluator, Parser} from './src/SimpleLangEvaluator'

console.log("\n")
console.log("Test 1 Can not perform mutable borrowing on an immutable constant")
console.log(new Evaluator().evaluate("let z: int  = 10; let y : *mut int = &mut z;")) // mutably borrow a constant
console.log("\n")
console.log("Test 2 Can not perform immutable borrowing on a value that is currently being mutably borrowed")
console.log(new Evaluator().evaluate("let mut x: int  = 10; let y : *mut int = &mut x; let z : *int = &x;"))
console.log("\n")
console.log("Test 3 Can not perform mutable borrowing on a value that is currently being immutable borrowed.")
console.log(new Evaluator().evaluate("let mut x: int  = 10; let y : *int = &x; let z : *mut int = &mut x;"))
console.log("\n")
console.log("Test 4 There is at most one mutable reference for each value")
console.log(new Evaluator().evaluate("let mut x: int  = 10; let y : *mut int = &mut x; let z : *mut int = &mut x;"))
console.log("\n")
console.log("Test 5 Can not move a value that is currently being borrowed")
console.log(new Evaluator().evaluate("let mut x: int  = 10; let y : *mut int = &mut x; let z : *mut int = y; *y;"))
console.log("\n")
console.log("Test 6 Can not borrow a value that has been moved")
console.log((new Evaluator()).evaluate("let x : string = \"1\"; let y : *string = &x; let z : string = x;"))
console.log("\n")
console.log("Test 7 Reference to dropped value is not usable and will raise errors upon de-referencing")
console.log((new Evaluator()).evaluate("let mut x : string = \"1\"; let y : *mut string = &mut x; let z : string = x;"))
console.log("\n")
console.log("Test 8 Moved and Dropped references do not count when applying these constraints")
console.log(new Evaluator().evaluate("let mut x: int  = 10; {let y : *mut int = &mut x;} let z : *int = &x; *z;"))
console.log(new Evaluator().evaluate("let mut x: int  = 10; {let y : *int = &x;} let z : *mut int = &mut x; *z;"))
